name: La Danze UI CI/CD

on:
  push:
    # Run on all branches excepted gh-pages
    branches:
      - '**'
      - '!gh-pages'
    # Ignore all tags, because release commits (where tags are) already trigged workflow
    # so it prevents workflow to be launched twice for same changes
    tags-ignore:
      - '*.*'
    # Don't run when files commited are only doc files
    paths-ignore:
      - '**.md'
      - '.github/doc/**'
  pull_request:
    # Run only on main branch
    branches:
      - 'main'
    # Ignore all tags, because release commits (where tags are) already trigged workflow
    # so it prevents workflow to be launched twice for same changes
    tags-ignore:
      - '*.*'
    # Don't run when files commited are only doc files  
    paths-ignore:
      - '**.md'
      - '.github/doc/**'


env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


jobs:

  # Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
      with:
        token: ${{ env.GITHUB_TOKEN }}

    - uses: actions/setup-node@v2
      with:
        node-version: '12'

    # ---------------------------------- 
    #           Yarn cache 
    # ----------------------------------   
    - uses: actions/cache@v2
      id: yarn-cache
      with:
        path: |
          node_modules
          */*/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    # ---------------------------------- 
    #           Yarn cache 
    # ----------------------------------          

    # Install dependencies
    - name: INSTALL
      # Install dependencies only if cache was not found to accelerate workflow
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install

    # Build all packages (lib, demo, doc)
    - name: BUILD
      run: yarn build:ci

    # Test lib package
    - name: TEST
      run: yarn test:ci:lib

    # ---------------------------------- 
    #         Upload artifacts 
    # ----------------------------------  
    - uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: packages/lib/coverage/lcov.info

    - uses: actions/upload-artifact@v2
      with:
        name: lib-dist
        path: packages/lib/dist/

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/
    # ---------------------------------- 
    #         Upload artifacts 
    # ----------------------------------         


  # Sonnar scan (lib package)  
  sonarcloud:
    name: Sonar
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        token: ${{ env.GITHUB_TOKEN }}

    # ---------------------------------- 
    #    Download coverage artifacts 
    # ---------------------------------- 
    - uses: actions/download-artifact@v2
      with:
        name: coverage
    # ---------------------------------- 
    #    Download coverage artifacts 
    # ---------------------------------- 

    # Run sonar scan
    - name: SONAR
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  # Release lib package
  release:
    name: Release
    # Launch only on main branch
    # Skip if it is a release commit (this job created it)
    if: github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'chore(release):')
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        token: ${{ env.GITHUB_TOKEN }}

    - uses: actions/setup-node@v2
      with:
        node-version: '12'

    # ---------------------------------- 
    #           Yarn cache 
    # ----------------------------------
    - uses: actions/cache@v2
      id: yarn-cache
      with:
        path: |
          node_modules
          */*/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    # ---------------------------------- 
    #           Yarn cache 
    # ----------------------------------

    # Install dependencies  
    - name: INSTALL
      # Install dependencies only if cache was not found to accelerate workflow
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install

    # Copy README.md to lib package (for npm)  
    - name: COPY README.md
      run: cp README.md packages/lib/

    # Release  
    - name: RELEASE
      run: yarn semantic-release
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}   
        GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}   
        GIT_COMMITTER_NAME: ${{ secrets.GIT_AUTHOR_NAME }}   
        GIT_COMMITTER_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}   


  # Deploy to gh pages
  deploy:
    name: Deploy
    # Deploy only if it is a release commit
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        token: ${{ env.GITHUB_TOKEN }}

    - uses: actions/setup-node@v2
      with:
        node-version: '12'

    # ---------------------------------- 
    #     Download dist artifacts 
    # ----------------------------------
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist/
    # ---------------------------------- 
    #     Download dist artifacts 
    # ----------------------------------

    # Deploy dist folder to gh pages  
    - name: DEPLOY
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ env.GITHUB_TOKEN }}
        publish_dir: ./dist
        user_name: ${{ secrets.GIT_AUTHOR_NAME }} 
        user_email: ${{ secrets.GIT_AUTHOR_EMAIL }}